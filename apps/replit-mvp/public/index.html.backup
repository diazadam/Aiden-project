<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Aiden AI - Your Personal AI Assistant</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --bg-primary: #0f0f0f;
      --bg-secondary: #1a1a1a;
      --bg-tertiary: #2d2d2d;
      --bg-input: #40414f;
      --bg-user: #343541;
      --bg-assistant: #444654;
      --border-color: #565869;
      --text-primary: #d1d5db;
      --text-secondary: #9ca3af;
      --text-muted: #6b7280;
      --accent-blue: #19c37d;
      --accent-hover: #16a34a;
      --danger: #ef4444;
      --warning: #f59e0b;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      height: 100vh;
      overflow: hidden;
    }
    
    .app-container {
      display: flex;
      height: 100vh;
    }
    
    /* Sidebar */
    .sidebar {
      width: 260px;
      background: var(--bg-secondary);
      display: flex;
      flex-direction: column;
      border-right: 1px solid var(--border-color);
    }
    
    .sidebar-header {
      padding: 16px;
      border-bottom: 1px solid var(--border-color);
    }
    
    .new-chat-btn {
      width: 100%;
      padding: 12px 16px;
      background: var(--bg-primary);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .new-chat-btn:hover {
      background: var(--bg-tertiary);
    }
    
    .chat-history {
      flex: 1;
      overflow-y: auto;
      padding: 8px;
    }
    
    .chat-item {
      padding: 12px 16px;
      margin: 2px 0;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.2s ease;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .chat-item:hover {
      background: var(--bg-tertiary);
    }
    
    .chat-item.active {
      background: var(--bg-user);
    }
    
    .sidebar-footer {
      padding: 16px;
      border-top: 1px solid var(--border-color);
    }
    
    .user-info {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 8px;
    }
    
    .avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: var(--accent-blue);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      font-weight: bold;
    }
    
    /* Main Chat Area */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .chat-header {
      padding: 16px 24px;
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: between;
      align-items: center;
    }
    
    .model-selector {
      background: var(--bg-tertiary);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 8px 12px;
      font-size: 14px;
      cursor: pointer;
    }
    
    .chat-container {
      flex: 1;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }
    
    .messages-container {
      flex: 1;
      padding: 24px 0;
    }
    
    .message {
      padding: 24px;
      display: flex;
      gap: 16px;
      align-items: flex-start;
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .message.user {
      background: var(--bg-user);
    }
    
    .message.assistant {
      background: var(--bg-assistant);
    }
    
    .message-avatar {
      width: 32px;
      height: 32px;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      flex-shrink: 0;
    }
    
    .user .message-avatar {
      background: var(--accent-blue);
      color: white;
    }
    
    .assistant .message-avatar {
      background: var(--accent-blue);
      color: white;
    }
    
    .message-content {
      flex: 1;
      line-height: 1.6;
      font-size: 16px;
    }
    
    .message-content h3 {
      margin-bottom: 8px;
      color: var(--text-primary);
    }
    
    .message-content pre {
      background: var(--bg-primary);
      border: 1px solid var(--border-color);
      border-radius: 6px;
      padding: 16px;
      margin: 12px 0;
      overflow-x: auto;
      font-size: 14px;
      font-family: 'SF Mono', Monaco, monospace;
    }
    
    .message-actions {
      display: flex;
      gap: 8px;
      margin-top: 12px;
      opacity: 0;
      transition: opacity 0.2s ease;
    }
    
    .message:hover .message-actions {
      opacity: 1;
    }
    
    .action-btn {
      background: none;
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      padding: 6px 12px;
      border-radius: 6px;
      font-size: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .action-btn:hover {
      background: var(--bg-tertiary);
      color: var(--text-primary);
    }
    
    /* Input Area */
    .input-container {
      padding: 24px;
      background: var(--bg-secondary);
      border-top: 1px solid var(--border-color);
    }
    
    .input-wrapper {
      max-width: 768px;
      margin: 0 auto;
      position: relative;
    }
    
    .input-form {
      display: flex;
      flex-direction: column;
      background: var(--bg-input);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      overflow: hidden;
    }
    
    .input-textarea {
      background: transparent;
      border: none;
      color: var(--text-primary);
      font-size: 16px;
      font-family: inherit;
      padding: 16px;
      resize: none;
      min-height: 24px;
      max-height: 200px;
      outline: none;
    }
    
    .input-textarea::placeholder {
      color: var(--text-muted);
    }
    
    .input-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 16px;
      background: var(--bg-input);
    }
    
    .input-actions {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    
    .send-btn {
      background: var(--accent-blue);
      color: white;
      border: none;
      width: 32px;
      height: 32px;
      border-radius: 6px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s ease;
    }
    
    .send-btn:hover:not(:disabled) {
      background: var(--accent-hover);
    }
    
    .send-btn:disabled {
      background: var(--bg-tertiary);
      cursor: not-allowed;
    }
    
    .character-count {
      font-size: 12px;
      color: var(--text-muted);
    }
    
    /* Welcome Screen */
    .welcome-screen {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 48px 24px;
      max-width: 768px;
      margin: 0 auto;
    }
    
    .welcome-title {
      font-size: 32px;
      font-weight: 600;
      margin-bottom: 16px;
      background: linear-gradient(135deg, var(--accent-blue) 0%, #10b981 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .welcome-subtitle {
      font-size: 18px;
      color: var(--text-secondary);
      margin-bottom: 32px;
    }
    
    .example-prompts {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
      width: 100%;
      max-width: 600px;
    }
    
    .example-prompt {
      background: var(--bg-user);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 16px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: left;
    }
    
    .example-prompt:hover {
      background: var(--bg-assistant);
      border-color: var(--accent-blue);
    }
    
    .example-prompt-title {
      font-weight: 600;
      margin-bottom: 4px;
    }
    
    .example-prompt-text {
      font-size: 14px;
      color: var(--text-secondary);
    }
    
    /* Loading Animation */
    .typing-indicator {
      display: flex;
      align-items: center;
      gap: 4px;
      padding: 16px 0;
    }
    
    .typing-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--text-muted);
      animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-dot:nth-child(1) { animation-delay: -0.32s; }
    .typing-dot:nth-child(2) { animation-delay: -0.16s; }
    
    @keyframes typing {
      0%, 80%, 100% { transform: scale(1); opacity: 0.5; }
      40% { transform: scale(1.2); opacity: 1; }
    }
    
    /* Mobile Styles */
    @media (max-width: 768px) {
      .sidebar {
        display: none;
      }
      
      .message {
        padding: 16px;
      }
      
      .input-container {
        padding: 16px;
      }
      
      .welcome-screen {
        padding: 24px 16px;
      }
      
      .welcome-title {
        font-size: 24px;
      }
      
      .example-prompts {
        grid-template-columns: 1fr;
      }
    }
    
    /* Status indicator */
    .status-indicator {
      position: fixed;
      top: 16px;
      right: 16px;
      padding: 8px 16px;
      background: var(--bg-secondary);
      border: 1px solid var(--border-color);
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
      z-index: 1000;
    }
    
    .status-indicator.online {
      border-color: var(--accent-blue);
      color: var(--accent-blue);
    }
    
    .status-indicator.offline {
      border-color: var(--danger);
      color: var(--danger);
    }
  </style>
</head>
<body>
  <div id="status" class="status-indicator">🔄 Connecting...</div>
  
  <div class="app-container">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="sidebar-header">
        <button class="new-chat-btn" onclick="startNewChat()">
          <span>✨</span>
          New Chat
        </button>
      </div>
      
      <div class="chat-history" id="chatHistory">
        <!-- Chat history items will be added here -->
      </div>
      
      <div class="sidebar-footer">
        <div class="user-info">
          <div class="avatar">A</div>
          <div>
            <div style="font-weight: 500; font-size: 14px;">Aiden AI</div>
            <div style="font-size: 12px; color: var(--text-muted);">Always ready to help</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Main Chat Area -->
    <div class="main-content">
      <div class="chat-header">
        <select class="model-selector" id="modelSelector">
          <option value="aiden-pro">Aiden Pro</option>
          <option value="aiden-standard">Aiden Standard</option>
          <option value="aiden-creative">Aiden Creative</option>
        </select>
      </div>
      
      <div class="chat-container">
        <div class="messages-container" id="messagesContainer">
          <!-- Welcome Screen (shown initially) -->
          <div class="welcome-screen" id="welcomeScreen">
            <h1 class="welcome-title">🤖 Welcome to Aiden</h1>
            <p class="welcome-subtitle">Your intelligent AI assistant that actually gets things done</p>
            
            <div class="example-prompts">
              <div class="example-prompt" onclick="useExamplePrompt(this)">
                <div class="example-prompt-title">🌐 Clone & Deploy</div>
                <div class="example-prompt-text">Clone any website and deploy it to the cloud</div>
              </div>
              
              <div class="example-prompt" onclick="useExamplePrompt(this)">
                <div class="example-prompt-title">📱 Build iOS App</div>
                <div class="example-prompt-text">Create a complete iOS application</div>
              </div>
              
              <div class="example-prompt" onclick="useExamplePrompt(this)">
                <div class="example-prompt-title">🎬 Create Demo</div>
                <div class="example-prompt-text">Generate professional demo videos</div>
              </div>
              
              <div class="example-prompt" onclick="useExamplePrompt(this)">
                <div class="example-prompt-title">⚡ Automate Workflow</div>
                <div class="example-prompt-text">Set up business automation with n8n</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Input Area -->
      <div class="input-container">
        <div class="input-wrapper">
          <div class="input-form">
            <textarea 
              id="messageInput" 
              class="input-textarea" 
              placeholder="Message Aiden..."
              rows="1"
            ></textarea>
            
            <div class="input-footer">
              <div class="input-actions">
                <button type="button" onclick="attachFile()" title="Attach file">
                  📎
                </button>
              </div>
              
              <div style="display: flex; align-items: center; gap: 8px;">
                <span class="character-count" id="charCount">0</span>
                <button id="sendBtn" class="send-btn" onclick="sendMessage()" disabled>
                  ➤
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Global state
    let currentMessages = [];
    let isTyping = false;
    let chatHistory = JSON.parse(localStorage.getItem('aidenChatHistory') || '[]');
    
    // DOM elements
    const statusEl = document.getElementById('status');
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    const charCount = document.getElementById('charCount');
    const welcomeScreen = document.getElementById('welcomeScreen');
    
    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      // Check API health
      checkApiHealth();
      
      // Load chat history
      loadChatHistory();
      
      // Setup input handlers
      setupInputHandlers();
      
      // Auto-resize textarea
      messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 200) + 'px';
        
        // Update character count and send button state
        const length = this.value.length;
        charCount.textContent = length;
        sendBtn.disabled = length === 0 || isTyping;
      });
      
      // Enter to send (Shift+Enter for new line)
      messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
    });
    
    async function checkApiHealth() {
      try {
        const response = await fetch('/api/health');
        const data = await response.json();
        statusEl.textContent = `✅ ${data.provider.toUpperCase()} Online`;
        statusEl.className = 'status-indicator online';
      } catch (error) {
        statusEl.textContent = '❌ Offline';
        statusEl.className = 'status-indicator offline';
      }
    }
    
    function setupInputHandlers() {
      // Focus on input when page loads
      messageInput.focus();
    }
    
    function loadChatHistory() {
      const historyContainer = document.getElementById('chatHistory');
      historyContainer.innerHTML = '';
      
      chatHistory.forEach((chat, index) => {
        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';
        chatItem.textContent = chat.title;
        chatItem.onclick = () => loadChat(index);
        historyContainer.appendChild(chatItem);
      });
    }
    
    function startNewChat() {
      currentMessages = [];
      messagesContainer.innerHTML = '';
      welcomeScreen.style.display = 'flex';
      messageInput.value = '';
      messageInput.focus();
    }
    
    function useExamplePrompt(element) {
      const title = element.querySelector('.example-prompt-title').textContent;
      const text = element.querySelector('.example-prompt-text').textContent;
      
      let prompt = '';
      if (title.includes('Clone')) {
        prompt = 'Clone the GitHub homepage and deploy it to Google Cloud';
      } else if (title.includes('iOS')) {
        prompt = 'Create an iOS app for a local restaurant with menu and ordering';
      } else if (title.includes('Demo')) {
        prompt = 'Create a professional demo video showcasing Aiden\'s capabilities';
      } else if (title.includes('Automate')) {
        prompt = 'Set up automation for sending appointment reminders to customers';
      }
      
      messageInput.value = prompt;
      messageInput.focus();
      sendMessage();
    }
    
    async function sendMessage() {
      const message = messageInput.value.trim();
      if (!message || isTyping) return;
      
      // Hide welcome screen
      if (welcomeScreen.style.display !== 'none') {
        welcomeScreen.style.display = 'none';
      }
      
      // Add user message
      addMessage('user', message);
      
      // Clear input
      messageInput.value = '';
      messageInput.style.height = 'auto';
      charCount.textContent = '0';
      sendBtn.disabled = true;
      
      // Show typing indicator
      showTypingIndicator();
      
      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message: message,
            account_id: 'user',
            business_name: 'Personal',
            industry: 'general'
          })
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        // Hide typing indicator
        hideTypingIndicator();
        
        // Add assistant response
        addMessage('assistant', data.assistant || 'Sorry, I couldn\'t process that request.');
        
        // If there's a taskcard, add it as a separate message
        if (data.taskcard) {
          const taskCardContent = `**Generated TaskCard:**\n\`\`\`json\n${JSON.stringify(data.taskcard, null, 2)}\n\`\`\``;
          addMessage('assistant', taskCardContent, true, data.taskcard);
        }
        
        // Save to history
        saveCurrentChat();
        
      } catch (error) {
        hideTypingIndicator();
        addMessage('assistant', `Error: ${error.message}`);
      } finally {
        isTyping = false;
        sendBtn.disabled = false;
        messageInput.focus();
      }
    }
    
    function addMessage(role, content, isTaskCard = false, taskcard = null) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${role}`;
      
      const avatar = document.createElement('div');
      avatar.className = 'message-avatar';
      avatar.textContent = role === 'user' ? '👤' : '🤖';
      
      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      
      // Format content
      if (content.includes('```')) {
        // Handle code blocks
        const parts = content.split('```');
        let formattedContent = '';
        
        for (let i = 0; i < parts.length; i++) {
          if (i % 2 === 0) {
            formattedContent += parts[i];
          } else {
            const lines = parts[i].split('\n');
            const language = lines[0];
            const code = lines.slice(1).join('\n');
            formattedContent += `<pre><code>${escapeHtml(code)}</code></pre>`;
          }
        }
        messageContent.innerHTML = formattedContent.replace(/\n/g, '<br>');
      } else if (content.includes('**')) {
        // Handle bold text
        messageContent.innerHTML = content
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
          .replace(/\n/g, '<br>');
      } else {
        messageContent.textContent = content;
      }
      
      // Add actions for assistant messages
      const actions = document.createElement('div');
      actions.className = 'message-actions';
      
      if (role === 'assistant') {
        actions.innerHTML = `
          <button class="action-btn" onclick="copyMessage(this)">📋 Copy</button>
          ${taskcard ? '<button class="action-btn" onclick="executeTaskCard(this)" data-taskcard=\'' + JSON.stringify(taskcard) + '\'>⚡ Execute</button>' : ''}
        `;
      }
      
      messageContent.appendChild(actions);
      messageDiv.appendChild(avatar);
      messageDiv.appendChild(messageContent);
      
      messagesContainer.appendChild(messageDiv);
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      
      // Save message to current conversation
      currentMessages.push({
        role,
        content,
        timestamp: new Date().toISOString(),
        taskcard: taskcard || null
      });
    }
    
    function showTypingIndicator() {
      isTyping = true;
      const typingDiv = document.createElement('div');
      typingDiv.className = 'message assistant';
      typingDiv.id = 'typingIndicator';
      
      const avatar = document.createElement('div');
      avatar.className = 'message-avatar';
      avatar.textContent = '🤖';
      
      const indicator = document.createElement('div');
      indicator.className = 'typing-indicator';
      indicator.innerHTML = '<div class="typing-dot"></div><div class="typing-dot"></div><div class="typing-dot"></div>';
      
      typingDiv.appendChild(avatar);
      typingDiv.appendChild(indicator);
      messagesContainer.appendChild(typingDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    function hideTypingIndicator() {
      const typingIndicator = document.getElementById('typingIndicator');
      if (typingIndicator) {
        typingIndicator.remove();
      }
      isTyping = false;
    }
    
    function copyMessage(button) {
      const messageContent = button.closest('.message-content');
      const text = messageContent.textContent.replace('📋 Copy⚡ Execute', '').trim();
      
      navigator.clipboard.writeText(text).then(() => {
        button.textContent = '✅ Copied';
        setTimeout(() => {
          button.textContent = '📋 Copy';
        }, 2000);
      });
    }
    
    async function executeTaskCard(button) {
      const taskcard = JSON.parse(button.dataset.taskcard);
      
      button.textContent = '⏳ Executing...';
      button.disabled = true;
      
      try {
        const response = await fetch('/api/task', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({taskcard})
        });
        
        const result = await response.json();
        
        if (result.status >= 200 && result.status < 300) {
          addMessage('assistant', `✅ **Task Executed Successfully!**\n\nStatus: ${result.status}\nResponse: ${result.body || 'Task completed'}`);
          button.textContent = '✅ Executed';
        } else {
          addMessage('assistant', `❌ **Task Execution Failed**\n\nStatus: ${result.status}\nError: ${result.body || result.detail || 'Unknown error'}`);
          button.textContent = '❌ Failed';
        }
        
      } catch (error) {
        addMessage('assistant', `❌ **Execution Error**: ${error.message}`);
        button.textContent = '❌ Error';
      } finally {
        button.disabled = false;
        setTimeout(() => {
          button.textContent = '⚡ Execute';
        }, 3000);
      }
    }
    
    function saveCurrentChat() {
      if (currentMessages.length === 0) return;
      
      // Create chat title from first message
      const title = currentMessages[0].content.substring(0, 50) + 
                   (currentMessages[0].content.length > 50 ? '...' : '');
      
      // Check if this is an existing chat or new one
      const existingIndex = chatHistory.findIndex(chat => chat.id === 'current');
      
      if (existingIndex >= 0) {
        chatHistory[existingIndex] = {
          id: 'current',
          title,
          messages: [...currentMessages],
          lastUpdated: new Date().toISOString()
        };
      } else {
        chatHistory.unshift({
          id: 'current',
          title,
          messages: [...currentMessages],
          lastUpdated: new Date().toISOString()
        });
      }
      
      // Limit history to 20 chats
      if (chatHistory.length > 20) {
        chatHistory = chatHistory.slice(0, 20);
      }
      
      localStorage.setItem('aidenChatHistory', JSON.stringify(chatHistory));
      loadChatHistory();
    }
    
    function loadChat(index) {
      const chat = chatHistory[index];
      if (!chat) return;
      
      currentMessages = [...chat.messages];
      messagesContainer.innerHTML = '';
      welcomeScreen.style.display = 'none';
      
      chat.messages.forEach(msg => {
        addMessage(msg.role, msg.content, !!msg.taskcard, msg.taskcard);
      });
    }
    
    function attachFile() {
      alert('File attachment coming soon!');
    }
    
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  </script>
</body>
</html>